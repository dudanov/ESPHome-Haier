esphome:
  name: haier
  platform: ESP8266
  board: esp01_1m
  includes:
    - Haier.h
globals:
  - id: control_command 
    type: byte[64]
    restore_value: no
    initial_value: '{HEADER,HEADER,20,64,0,0,0,0,0,1,SEND_COMMAND}' #this is the header, the rest of the message is the status/control
    
logger:
  level: DEBUG
  baud_rate: 0 #Important. You can't use serial port
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.1.10
    
api:
# Enable Home Assistant API
ota:

web_server:

switch:
  - platform: template
    name: "Screen"
    id: display_status
    icon: mdi:monitor-eye
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Use Fahrenheit"
    id: units_status
    icon: mdi:temperature-fahrenheit
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Health Mode"
    id: purify_status
    icon: mdi:shimmer
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA2_OFFSET], HEALTH_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA2_OFFSET], HEALTH_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA2_OFFSET], HEALTH_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Self Clean"
    id: self_clean_status
    icon: mdi:liquid-spot
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Steri Clean 56C"
    id: steri_clean_status
    icon: mdi:liquid-spot
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Controls Lock"
    id: lock_status
    icon: mdi:remote-off
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Supplamental Heat"
    id: supp_heat
    icon: mdi:heating-coil
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA2_OFFSET], ELECTRIC_HEAT_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA2_OFFSET], ELECTRIC_HEAT_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA2_OFFSET], ELECTRIC_HEAT_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Beeper"
    id: echo_status
    icon: mdi:volume-high
    restore_state: true
    optimistic: true
  - platform: template
    name: "Fresh Air"
    id: fresh_mode
    icon: mdi:weather-windy
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], FRESH_AIR_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], FRESH_AIR_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], FRESH_AIR_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Light Status"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], LIGHT_STATUS_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], LIGHT_STATUS_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], LIGHT_STATUS_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Energy Save Status"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], ENERGY_SAVE_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], ENERGY_SAVE_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], ENERGY_SAVE_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Filter"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], FILTER_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], FILTER_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], FILTER_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Intelligence"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], INTELLIGENCE_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], INTELLIGENCE_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], INTELLIGENCE_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Pulse Motor Valve"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], PMV_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], PMV_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], PMV_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Energy Save"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], ENERGY_SAVE_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], ENERGY_SAVE_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], ENERGY_SAVE_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Half Degree"
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], HALF_DEGREE_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], HALF_DEGREE_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], HALF_DEGREE_BIT);
          sendData(id(control_command));

sensor:
  - platform: template
    id: outdoor_temp
    name: "Outdoor Temperature"
    update_interval: 5s
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    lambda: |-
            return ((id(control_command)[OUTDOOR_TEMP])/2.0)-20; //offset of 25

climate:
  - platform: custom
    lambda: |-
      auto haier = new Haier();
      App.register_component(haier);
      return {haier};
    climates:
      - name: "Haier_AC"