esphome:
  name: haier
  platform: ESP8266
  board: esp01_1m
  includes:
    - Haier.h
globals:
  - id: control_command 
    type: byte[64]
    restore_value: no
    initial_value: '{HEADER,HEADER,20,64,0,0,0,0,0,1,SEND_COMMAND}' #this is the header, the rest of the message is the status/control
    
logger:
  level: DEBUG
  baud_rate: 0 #Important. You can't use serial port
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: haier.local
    
api:
# Enable Home Assistant API
ota:

web_server:

switch:
  - platform: template
    name: "Screen"
    id: display_status
    icon: mdi:monitor-eye
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], DISPLAY_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Use Fahrenheit"
    id: units_status
    icon: mdi:temperature-fahrenheit
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], F_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Health Mode"
    id: purify_status
    icon: mdi:shimmer
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA2_OFFSET], PURIFY_DATA2_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA2_OFFSET], PURIFY_DATA2_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA2_OFFSET], PURIFY_DATA2_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Self Clean"
    id: self_clean_status
    icon: mdi:liquid-spot
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA3_OFFSET], SELF_CLEAN_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Steri Clean 56C"
    id: steri_clean_status
    icon: mdi:liquid-spot
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA1_OFFSET], SELF_CLEAN56_BIT);
          sendData(id(control_command));
  - platform: template
    name: "Controls Lock"
    id: lock_status
    icon: mdi:remote-off
    lambda: |-
        return bitRead(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
    turn_on_action:
      - lambda: |-
          bitSet(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
          sendData(id(control_command));
    turn_off_action:
      - lambda: |-
          bitClear(id(control_command)[STATUS_DATA2_OFFSET], LOCK_BIT);
          sendData(id(control_command));
          
          
          
  - platform: template
    name: "Tester"
    id: tester_status
    icon: mdi:wrench
    lambda: |-
        return bitRead(id(control_command)[(int)id(Tester_byte).state], (int)id(Tester_bit).state);
    turn_on_action:
      - lambda: |-
          if(id(Tester_byte).state < 25){//dont try to control status only bytes
            bitSet(id(control_command)[(int)id(Tester_byte).state], (int)id(Tester_bit).state);
            sendData(id(control_command));
          }
    turn_off_action:
      - lambda: |-
          if(id(Tester_byte).state < 25){//dont try to control status only bytes
            bitClear(id(control_command)[(int)id(Tester_byte).state], (int)id(Tester_bit).state);
            sendData(id(control_command));
          }
number:
  - platform: template
    id: Tester_byte
    name: "Tester_byte"
    max_value: 46
    min_value: 12
    step: 1
    optimistic: true
  - platform: template
    id: Tester_bit
    name: "Tester_bit"
    max_value: 7
    min_value: 0
    step: 1
    optimistic: true
sensor:
  - platform: template
    id: outdoor_temp
    name: "Outdoor Temperature"
    update_interval: 5s
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    lambda: |-
            return ((id(control_command)[OUTDOOR_TEMP]) / 2) -32; //offset of 32
  - platform: template
    id: Tester_byte_value
    name: "Tester Byte Value"
    update_interval: 1s
    lambda: |-
            return (id(control_command)[(int)id(Tester_byte).state]);

  
climate:
  - platform: custom
    lambda: |-
      auto haier = new Haier();
      App.register_component(haier);
      return {haier};
    climates:
      - name: "Haier_AC"